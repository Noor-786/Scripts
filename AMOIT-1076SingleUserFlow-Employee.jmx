<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518082360000</longProp>
        <longProp name="ThreadGroup.end_time">1518082360000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">D:\Projects\chromedriver_win32\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:\Hilti\Performance scripts\Client API\allusers.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">username,password</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="URL1" elementType="Argument">
              <stringProp name="Argument.name">URL1</stringProp>
              <stringProp name="Argument.value">https://ontrack-d.hilti.com/ontrack/index.html#</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="URL2" elementType="Argument">
              <stringProp name="Argument.name">URL2</stringProp>
              <stringProp name="Argument.value">https://puneqa.ictoncloud.in/ontrack/index.html#/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="assetURL" elementType="Argument">
              <stringProp name="Argument.name">assetURL</stringProp>
              <stringProp name="Argument.value">https://puneqa.ictoncloud.in/ontrack/app.html#/assets</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="URL3" elementType="Argument">
              <stringProp name="Argument.name">URL3</stringProp>
              <stringProp name="Argument.value">https://perf.ictoncloud.in/ontrack/index.html#/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="URL" elementType="Argument">
              <stringProp name="Argument.name">URL</stringProp>
              <stringProp name="Argument.value">https://perf.ictoncloud.in/ontrack/index.html#/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login Validation ${username}" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg=JavaImporter(org.openqa.selenium) //import java selenium package
var selection=JavaImporter(org.openqa.selenium.support.ui.Select)
var support_ui=JavaImporter(org.openqa.selenium.support.ui.WebDriverWait) //import WebDriverWait Package
var ui=JavaImporter(org.openqa.selenium.support.ui) //import Selenium Support UI package
var wait=new support_ui.WebDriverWait(WDS.browser,5000) // wait 5 seconds until page loads
var time=JavaImporter(java.util.concurrent.TimeUnit)
try{
	
	//WDS.sampleResult.sampleStart() //sample starting point
	WDS.sampleResult.subSampleStart(&apos;Launch Hilti On!Track Webpage&apos;);
	WDS.browser.get(&apos;${URL2}&apos;);
//	wait.until(ui.ExpectedConditions.urlToBe(&apos;${URL1}&apos;));
	if (	WDS.browser.executeScript(&quot;return document.readyState&quot;).toString().equals(&quot;complete&quot;)){
		 WDS.log.info(&quot;Hilti On!Track webpage loaded&quot;);
		}
	else { WDS.log.info(&quot;Not in the expected page&quot;);}
	WDS.sampleResult.subSampleEnd(true);
	
	WDS.sampleResult.subSampleStart(&apos;Login&apos;);
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;))) ;
		var usernameField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;)); //define username field
		var passwordField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;)); //define username field
		var loginButton=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;login_submit&apos;]&quot;)); //define login submit button
		if (usernameField.isDisplayed()){
			usernameField.clear();
			usernameField.sendKeys(&apos;${username}&apos;)	; // fill username
		}
		if (passwordField.isDisplayed()){
			passwordField.clear();
			wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;))) ;
			passwordField.sendKeys(&apos;${password}&apos;)	; // fill password
		}
		if(loginButton.isDisplayed()){
			loginButton.click() //click on the submit
		}
	WDS.sampleResult.subSampleEnd(true)

	//Hilti Brochure Popup
	wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;))) ;
	var clickPopup = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;));
	if(clickPopup.isDisplayed()){
		clickPopup.click() //click on Hilti Brochure Popup
		WDS.log.info(&quot;Hilti Brochure Popup clicked&quot;);
	}

	//click on dontShow cross button
	wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;))) ;
	var clickcookiePopup =WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;));//click popup cross button
	if(clickcookiePopup.isDisplayed()){
		clickcookiePopup.click() //click on Cookie Popup
		WDS.log.info(&quot;Cookie Popup clicked&quot;);
	}
	
	} 
	catch(err)
{
   WDS.log.error(err.message)
   var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE);
   screenshot.renameTo(new java.io.File(&apos;screenshot.png&apos;));
   exception = err;
}
</stringProp>
          <stringProp name="WebDriverSampler.parameters">${__threadNum}-${loopcounter}</stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Add Employee ${username}" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg=JavaImporter(org.openqa.selenium) //import java selenium package
var selection=JavaImporter(org.openqa.selenium.support.ui.Select)
var support_ui=JavaImporter(org.openqa.selenium.support.ui.WebDriverWait) //import WebDriverWait Package
var ui=JavaImporter(org.openqa.selenium.support.ui) //import Selenium Support UI package
var wait=new support_ui.WebDriverWait(WDS.browser,5000) // wait 5 seconds until page loads
var time=JavaImporter(java.util.concurrent.TimeUnit)
WDS.sampleResult.sampleStart() //sample starting point

//	WDS.browser.get(&apos;${URL}&apos;);
//wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;))) ;
////WDS.sampleResult.subSampleEnd(true)
//
////WDS.sampleResult.subSampleStart(&apos;Login&apos;)
//var usernameField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;)); //define username field
//usernameField.sendKeys(&apos;${username}&apos;) // fill username
//var passwordField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;)); //define username field
//passwordField.sendKeys(&apos;${password}&apos;) // fill password
//var loginButton=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;login_submit&apos;]&quot;)); //define login submit button
//loginButton.click() //click on the submit
//
//	wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;bannerCloseIcon&apos;]&quot;))) ;
//	var clickPopup = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;bannerCloseIcon&apos;]&quot;)).click(); //click popup cross button
//
//	wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;))) ;
//	var clickcookiePopup =WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;)).click(); //click cookie popup cross button

wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;))) ;
var clickEmployee=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;)).click();// click on employee tab
		

wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;addEmployee()&apos;)]&quot;))) ;		
	var clickAddEmployee=WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;addEmployee()&apos;)]&quot;)).click();  // Click on Add Employee
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;))) ;	
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;)).sendKeys(&quot;${employee}&quot;);
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;))) ;
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;)).sendKeys(&quot;${lastname}&quot;);
		
 WDS.browser.executeScript(&quot;window.scrollTo(0, document.body.scrollHeight)&quot;);
		 
wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;))) ;
		 WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;.//*[@id=&apos;toast-container&apos;]/table/tbody/tr/td[1]/div&quot;))) ;
		WDS.log.info(&apos;Employee added and ModalWindow closed&apos;);

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters">${__threadNum}-${loopcounter}</stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1193469614">employee</stringProp>
              <stringProp name="-1458646495">lastname</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-559125770">
                <stringProp name="1138668493">perfCirrusFirstName${__time(,)}${__RandomString(9,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
                <stringProp name="1267252845">perfCirrusLastName${__time(,)}${__RandomString(9,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="employee" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">firstName</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"> firstNamenotfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="false">
            <stringProp name="maximumValue">10000</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">lastname</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Edit Employee" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg=JavaImporter(org.openqa.selenium) //import java selenium package
var selection=JavaImporter(org.openqa.selenium.support.ui.Select)
var support_ui=JavaImporter(org.openqa.selenium.support.ui.WebDriverWait) //import WebDriverWait Package
var ui=JavaImporter(org.openqa.selenium.support.ui) //import Selenium Support UI package
var wait=new support_ui.WebDriverWait(WDS.browser,5000) // wait 5 seconds until page loads
var time=JavaImporter(java.util.concurrent.TimeUnit)
var assert=JavaImporter(org.testng.Assert)
var NSE = JavaImporter(org.openqa.selenium.NoSuchElementException)
var fluent_wait= JavaImporter(org.openqa.selenium.support.ui.FluentWait)
var exception = null

try{
	
	WDS.sampleResult.sampleStart() //sample starting point
	WDS.sampleResult.subSampleStart(&apos;Launch Hilti On!Track Webpage&apos;);
	WDS.browser.get(&apos;${URL2}&apos;);
	//wait.until(ui.ExpectedConditions.urlToBe(&apos;${URL}&apos;));
	if (	WDS.browser.executeScript(&quot;return document.readyState&quot;).toString().equals(&quot;complete&quot;)){
		 WDS.log.info(&quot;Hilti On!Track webpage loaded&quot;);
		}
	else { WDS.log.info(&quot;Not in the expected page&quot;);}
	WDS.sampleResult.subSampleEnd(true);
	
	WDS.sampleResult.subSampleStart(&apos;Login&apos;);
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;))) ;
		var usernameField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;)); //define username field
		var passwordField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;)); //define username field
		var loginButton=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;login_submit&apos;]&quot;)); //define login submit button
		if (usernameField.isDisplayed()){
			usernameField.clear();
			usernameField.sendKeys(&apos;${username}&apos;)	; // fill username
		}
		if (passwordField.isDisplayed()){
			passwordField.clear();
			wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;))) ;
			passwordField.sendKeys(&apos;${password}&apos;)	; // fill password
		}
		if(loginButton.isDisplayed()){
			loginButton.click() //click on the submit
		}
	WDS.sampleResult.subSampleEnd(true)
	
	//Hilti Brochure Popup
	wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;))) ;
	var clickPopup = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;));
	if(clickPopup.isDisplayed()){
		clickPopup.click() //click on Hilti Brochure Popup
		WDS.log.info(&quot;Hilti Brochure Popup clicked&quot;);
	}

	//click on dontShow cross button
	wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;))) ;
	var clickcookiePopup =WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;));//click popup cross button
	if(clickcookiePopup.isDisplayed()){
		clickcookiePopup.click() //click on Cookie Popup
		WDS.log.info(&quot;Cookie Popup clicked&quot;);
	}

	wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;))) ;
	var clickEmployee=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;)).click();// click on employee tab

		//Edit asset 
		WDS.sampleResult.subSampleStart(&apos;Edit an Employee&apos;);
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@role, &apos;checkbox&apos;)]&quot;))) ;	
		var list = WDS.browser.findElements(pkg.By.xpath(&quot;//*[contains(@role, &apos;checkbox&apos;)]&quot;));
		
		list[1].click();
		wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//div[@id=&apos;emp_editEmp&apos;]&quot;))) ;
		var editAsset = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@id=&apos;emp_editEmp&apos;]&quot;));
		editAsset.click();
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;))) ;	
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;)).sendKeys(&quot;${emp_firstname}&quot;);
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;))) ;
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;)).sendKeys(&quot;${emp_lastname}&quot;);

				
		WDS.browser.executeScript(&quot;window.scrollTo(0, document.body.scrollHeight)&quot;);
		 
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;))) ;
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;)).click();

		wait.until(ui.ExpectedConditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;.//*[@id=&apos;toast-container&apos;]/table/tbody/tr/td[1]/div&quot;))) ;
		WDS.log.info(&apos;Employee added and ModalWindow closed&apos;);

WDS.sampleResult.sampleEnd()
	} 
	catch(err)
{
   WDS.log.error(err.message)
   var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE);
   screenshot.renameTo(new java.io.File(&apos;screenshot.png&apos;));
   exception = err;
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="865967748">emp_firstname</stringProp>
              <stringProp name="-49554504">emp_lastname</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-110252832">
                <stringProp name="1032181124">${__RandomString(5,abcdefghijklmnopqrstuvwxyz1234567890,)}</stringProp>
                <stringProp name="1455827846">${__RandomString(7,abcdefghijklmnopqrstuvwxyz1234567890,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Read Employee" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg=JavaImporter(org.openqa.selenium,org.openqa.selenium.support.ui) //import java selenium package
var selection=JavaImporter(org.openqa.selenium.support.ui.Select)
var support_ui=JavaImporter(org.openqa.selenium.support.ui.WebDriverWait) //import WebDriverWait Package
var ui=JavaImporter(org.openqa.selenium.support.ui) //import Selenium Support UI package
var wait=new support_ui.WebDriverWait(WDS.browser,5000) // wait 5 seconds until page loads
var time=JavaImporter(java.util.concurrent.TimeUnit)
var assert=JavaImporter(org.testng.Assert)
var NSE = JavaImporter(org.openqa.selenium.NoSuchElementException)
var fluent_wait= JavaImporter(org.openqa.selenium.support.ui.FluentWait)
var exception = null
var keys=JavaImporter(org.openqa.selenium.Keys)

try{
//	
WDS.sampleResult.sampleStart() //sample starting point
	WDS.sampleResult.subSampleStart(&apos;Launch Hilti On!Track Webpage&apos;);
	WDS.browser.get(&apos;${URL2}&apos;);
	//wait.until(ui.ExpectedConditions.urlToBe(&apos;${URL}&apos;));
	if (	WDS.browser.executeScript(&quot;return document.readyState&quot;).toString().equals(&quot;complete&quot;)){
		 WDS.log.info(&quot;Hilti On!Track webpage loaded&quot;);
		}
	else { WDS.log.info(&quot;Not in the expected page&quot;);}
	WDS.sampleResult.subSampleEnd(true);
	
	WDS.sampleResult.subSampleStart(&apos;Login&apos;);
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;))) ;
		var usernameField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;)); //define username field
		var passwordField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;)); //define username field
		var loginButton=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;login_submit&apos;]&quot;)); //define login submit button
		if (usernameField.isDisplayed()){
			usernameField.clear();
			usernameField.sendKeys(&apos;${username}&apos;)	; // fill username
		}
		if (passwordField.isDisplayed()){
			passwordField.clear();
			wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;))) ;
			passwordField.sendKeys(&apos;${password}&apos;)	; // fill password
		}
		if(loginButton.isDisplayed()){
			loginButton.click() //click on the submit
		}
	WDS.sampleResult.subSampleEnd(true)
	
	//Hilti Brochure Popup
	wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;))) ;
	var clickPopup = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;));
	if(clickPopup.isDisplayed()){
		clickPopup.click() //click on Hilti Brochure Popup
		WDS.log.info(&quot;Hilti Brochure Popup clicked&quot;);
	}

	//click on dontShow cross button
	wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;))) ;
	var clickcookiePopup =WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;));//click popup cross button
	if(clickcookiePopup.isDisplayed()){
		clickcookiePopup.click() //click on Cookie Popup
		WDS.log.info(&quot;Cookie Popup clicked&quot;);
	}

wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;))) ;
var clickEmployee=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;)).click();// click on employee tab
		
WDS.sampleResult.subSampleStart(&apos;Add Employee&apos;);
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;addEmployee()&apos;)]&quot;))) ;		
	var clickAddEmployee=WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;addEmployee()&apos;)]&quot;)).click();  // Click on Add Employee
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;))) ;	
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;)).sendKeys(&quot;${employee}&quot;);
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;))) ;
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;)).sendKeys(&quot;${lastname}&quot;);

		 WDS.log.info(&quot;${employee}&quot;);
		 WDS.browser.executeScript(&quot;window.scrollTo(0, document.body.scrollHeight)&quot;);
		 
          wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;))) ;
		 WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;)).click();

          wait.until(ui.ExpectedConditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;.//*[@id=&apos;toast-container&apos;]/table/tbody/tr/td[1]/div&quot;))) ;
		WDS.log.info(&apos;Employee added and ModalWindow closed&apos;);

if (	WDS.browser.executeScript(&quot;return document.readyState&quot;).toString().equals(&quot;complete&quot;)){
		 WDS.log.info(&quot;Hilti On!Track webpage loaded&quot;);
		}
	else { WDS.log.info(&quot;Not in the expected page&quot;);}

	WDS.sampleResult.subSampleEnd(true)

		//Read Employee 
		WDS.sampleResult.subSampleStart(&apos;Search an Employees to read&apos;);
				
		wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;.//input[@class=&apos;dx-texteditor-input&apos;]&quot;))) ;	
		WDS.log.info(&apos;Employee added and ModalWindow closed3&apos;);
		var searchField=WDS.browser.findElement(pkg.By.xpath(&quot;.//input[@class=&apos;dx-texteditor-input&apos;]&quot;)); //define login submit button
		if (searchField.isDisplayed()){
			searchField.clear();
			searchField.sendKeys(&apos;${employee}&apos;)	; // fill username
			WDS.log.info(&quot;${employee}&quot;);
		}

//	wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//td[contains(@role,&apos;gridcell&apos;)and contains(text(),&apos;perf&apos;)]&quot;))) ;	
//		var list = WDS.browser.findElements(pkg.By.xpath(&quot;//*[contains(@role, &apos;checkbox&apos;)]&quot;));
//		var count =10;
//		for(var i=1;i&lt;=10; i++){
//		
//		        list[i].click();
//			}
		

	WDS.sampleResult.subSampleEnd(true)	
WDS.sampleResult.sampleEnd()
	} 
	catch(err)
{
   WDS.log.error(err.message)
   var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE);
   screenshot.renameTo(new java.io.File(&apos;screenshot.png&apos;));
   exception = err;
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1193469614">employee</stringProp>
              <stringProp name="-1458646495">lastname</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1963654010">
                <stringProp name="1962841617">perfCirrusFN${__RandomString(2,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
                <stringProp name="519600843">perfCirrusLN${__RandomString(2,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Delete Employee" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg=JavaImporter(org.openqa.selenium) //import java selenium package
var selection=JavaImporter(org.openqa.selenium.support.ui.Select)
var support_ui=JavaImporter(org.openqa.selenium.support.ui.WebDriverWait) //import WebDriverWait Package
var ui=JavaImporter(org.openqa.selenium.support.ui) //import Selenium Support UI package
var wait=new support_ui.WebDriverWait(WDS.browser,5000) // wait 5 seconds until page loads
var time=JavaImporter(java.util.concurrent.TimeUnit)
var assert=JavaImporter(org.testng.Assert)
var NSE = JavaImporter(org.openqa.selenium.NoSuchElementException)
var fluent_wait= JavaImporter(org.openqa.selenium.support.ui.FluentWait)
var exception = null

try{
	
	WDS.sampleResult.sampleStart() //sample starting point
	WDS.sampleResult.subSampleStart(&apos;Launch Hilti On!Track Webpage&apos;);
	WDS.browser.get(&apos;${URL2}&apos;);
	//wait.until(ui.ExpectedConditions.urlToBe(&apos;${URL}&apos;));
	if (	WDS.browser.executeScript(&quot;return document.readyState&quot;).toString().equals(&quot;complete&quot;)){
		 WDS.log.info(&quot;Hilti On!Track webpage loaded&quot;);
		}
	else { WDS.log.info(&quot;Not in the expected page&quot;);}
	WDS.sampleResult.subSampleEnd(true);
	
	WDS.sampleResult.subSampleStart(&apos;Login&apos;);
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;))) ;
		var usernameField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;userName&apos;]&quot;)); //define username field
		var passwordField = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;)); //define username field
		var loginButton=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;login_submit&apos;]&quot;)); //define login submit button
		if (usernameField.isDisplayed()){
			usernameField.clear();
			usernameField.sendKeys(&apos;${username}&apos;)	; // fill username
		}
		if (passwordField.isDisplayed()){
			passwordField.clear();
			wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//input[@name=&apos;password&apos;]&quot;))) ;
			passwordField.sendKeys(&apos;${password}&apos;)	; // fill password
		}
		if(loginButton.isDisplayed()){
			loginButton.click() //click on the submit
		}
	WDS.sampleResult.subSampleEnd(true)
	
	//Hilti Brochure Popup
	wait.until(ui.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;))) ;
	var clickPopup = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@id=&apos;modalDialogPopUp&apos;]/div[2]/div[@class=&apos;bannerCloseIcon&apos;]&quot;));
	if(clickPopup.isDisplayed()){
		clickPopup.click() //click on Hilti Brochure Popup
		WDS.log.info(&quot;Hilti Brochure Popup clicked&quot;);
	}

	//click on dontShow cross button
	wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;))) ;
	var clickcookiePopup =WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;dontShow()&apos;)]&quot;));//click popup cross button
	if(clickcookiePopup.isDisplayed()){
		clickcookiePopup.click() //click on Cookie Popup
		WDS.log.info(&quot;Cookie Popup clicked&quot;);
	}

	wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;))) ;
	var clickEmployee=WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;nav_employees&apos;]/a[2]&quot;)).click();// click on employee tab

	WDS.sampleResult.subSampleStart(&apos;Add Employee&apos;);
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;addEmployee()&apos;)]&quot;))) ;		
	var clickAddEmployee=WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@ng-click,&apos;addEmployee()&apos;)]&quot;)).click();  // Click on Add Employee
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;))) ;	
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_firstName&apos;]&quot;)).sendKeys(&quot;${employee}&quot;);
		
		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;))) ;
		WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_lastName&apos;]&quot;)).sendKeys(&quot;${emp_lastname}&quot;);

		 WDS.log.info(&quot;${employee}&quot;);
		 WDS.browser.executeScript(&quot;window.scrollTo(0, document.body.scrollHeight)&quot;);
		 
          wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;))) ;
		 WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;emp_saveExitBtn&apos;]&quot;)).click();

          wait.until(ui.ExpectedConditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;.//*[@id=&apos;toast-container&apos;]/table/tbody/tr/td[1]/div&quot;))) ;
		WDS.log.info(&apos;Employee added and ModalWindow closed&apos;);

if (	WDS.browser.executeScript(&quot;return document.readyState&quot;).toString().equals(&quot;complete&quot;)){
		 WDS.log.info(&quot;Hilti On!Track webpage loaded&quot;);
		}
	else { WDS.log.info(&quot;Not in the expected page&quot;);}

	WDS.sampleResult.subSampleEnd(true)

		//Read Employee 
		WDS.sampleResult.subSampleStart(&apos;Search an Employees to read&apos;);
				
		wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;.//input[@class=&apos;dx-texteditor-input&apos;]&quot;))) ;	
		WDS.log.info(&apos;Employee added and ModalWindow closed3&apos;);
		var searchField=WDS.browser.findElement(pkg.By.xpath(&quot;.//input[@class=&apos;dx-texteditor-input&apos;]&quot;)); //define login submit button
		if (searchField.isDisplayed()){
			searchField.clear();
			searchField.sendKeys(&apos;${employee}&apos;)	; // fill username
			WDS.log.info(&quot;${employee}&quot;);
		}
		WDS.sampleResult.subSampleEnd(true)

		//Delete asset 
		WDS.sampleResult.subSampleStart(&apos;Delete Employee&apos;);
		wait.until(ui.ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//*[contains(@role, &apos;checkbox&apos;)])[2]&quot;))) ;	
		var list = WDS.browser.findElement(pkg.By.xpath(&quot;(//*[contains(@role, &apos;checkbox&apos;)])[2]&quot;));
		WDS.log.info(&quot;Checkbox visible&quot;);
		list.click();

		WDS.log.info(&quot;Checkbox clicked&quot;);

		wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//div[@id=&apos;emp_deleteEmp&apos;]&quot;))) ;
		var deleteAsset = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@id=&apos;emp_deleteEmp&apos;]&quot;));
		deleteAsset.click();
		
         wait.until(ui.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[@title=&apos;Delete Employee(s)&apos;]&quot;))) ;	
         var clickOK = WDS.browser.findElement(pkg.By.xpath(&quot;//button[@title=&apos;Delete Employee(s)&apos;]&quot;));
		clickOK.click();

		wait.until(ui.ExpectedConditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;.//*[@id=&apos;toast-container&apos;]/table/tbody/tr/td[1]/div&quot;))) ;
		WDS.log.info(&apos;Deleted Employee modal closed&apos;);

WDS.sampleResult.sampleEnd()
	} 
	catch(err)
{
   WDS.log.error(err.message)
   var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE);
   screenshot.renameTo(new java.io.File(&apos;screenshot.png&apos;));
   exception = err;
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1193469614">employee</stringProp>
              <stringProp name="-49554504">emp_lastname</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-110252832">
                <stringProp name="1032181124">${__RandomString(5,abcdefghijklmnopqrstuvwxyz1234567890,)}</stringProp>
                <stringProp name="1455827846">${__RandomString(7,abcdefghijklmnopqrstuvwxyz1234567890,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
